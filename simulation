Web VPython 3.2
from vpython import *

#Constants
G = 6.67e-11
c = 3e8

#Masses
while True:
    scene = canvas(align = 'left')
    scene.lights = []
    scene.ambient = vector(1,1,1)
    scene.width = 1000
    scene.height = 700
    
    gd = graph(title = 'Frequency vs Time', xtitle = 'Time (s)', ytitle = 'Frequency (1/s)', align = 'right', width = 500, height = 300)
    fgraph = gcurve(color=color.cyan)
    SM = 2e30
    m1 = 40 * SM
    m2 = 30 * SM
    mu = (m1 * m2)/(m1 + m2)
    Mtot = m1 + m2
    chirp = (mu**3 * Mtot**2)**(1/5)
    
    #Initial Values for Angular Frequency and Distance
    omega_0 = 100
    r_0 = (G * Mtot / omega_0**2)**(1/3)
    domega_dt = ((96/5)**3 * (omega_0**11/c**15) * (G*chirp)**5)**(1/3)
    
    #Spheres for Modeling Masses
    mass2 = sphere(pos=vector((m1/Mtot), 0,0), radius=0.04, color=color.black, make_trail=True, retain=300) 
    mass2.trail_color = color.white
    mass1 = sphere(pos=vector(-(m2/Mtot),0,0), radius=0.04, color=color.black, make_trail=True, retain=300) 
    mass1.trail_color = color.white
    background = box(pos = vector(-1, .5, -1), length = 10, width = 1, height = 6,texture = "https://cdn.pixabay.com/photo/2021/02/22/23/41/gradient-6041843_640.png")
    #Loop
    omega = omega_0
    r = r_0
    t = 0
    scene.range = .7
    
    phi = 0
    deltat = 1e-5
    while omega < 2000:
        rate(1000)
        fgraph.plot(pos=(t, omega))  #uncomment this line to show plot

        #Update position
        r = (G * Mtot / omega**2)**(1/3)
        xcoord = r/r_0 * cos(phi)
        ycoord = r/r_0 * sin(phi)
        mass2.pos = vector((m1/Mtot)*xcoord,(m1/Mtot)* ycoord, 0)
        mass1.pos = vector(-(m2/Mtot)*xcoord,-(m2/Mtot)* ycoord, 0)
        
        #Update time derivative of angular frequency
        domega_dt = ((96/5)**3 * (omega**11/c**15) * (G*chirp)**5)**(1/3)
        
        #Update angular frequency
        omega += domega_dt*deltat
        
        phi += omega*deltat
    
        #Update time step
        t += deltat
    scene.delete()
    gd.delete()
